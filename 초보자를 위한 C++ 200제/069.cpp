//069
//포인터 이해하기(*)
#include <iostream>

using namespace std;

int main() {
	int number1 = 10;
	int *pointer1 = &number1; //변수 이름 앞에 *을 붙인다. *(아스테리스크)가 붙은 변수는 실제 값이 아니라 주소를 저장한다는 의미이다.
	                          //*pointer1 변수에는 number1의 주소를 저장할 수 있도록 number1 변수에 주소가 할당된다.
	                          //&(앰퍼샌드)는 변수의 주소를 불러오는 의미이다.
	                          //따라서, 주소를 저장하도록 *가 붙은 변수를 선언하고, 그 변수에 주소를 불러오는 &을 이용해 number1의 주소를 가져와 대입하는 것이다.

	double number2 = 23.4;
	double *pointer2 = &number2; //방법은 위와 동일하다.

	cout << "number1 : " << number1 << "(size : " << sizeof(number1) << ")" << endl; //int 변수의 크기는 4바이트이며 포인터 또한 4바이트이다.
	cout << "pointer1 : " << pointer1 << "(size : " << sizeof(pointer1) << ")" << endl; //포인터는 값이 아닌 주소를 저장하기 때문에 출력 결과는 컴퓨터 내부의 위치를 가리키는 주소값이다.
	                                                                                    //이 주소값은 컴퓨터 내부적으로 할당하기 떄문에 사용자가 임의로 주소를 지정할 수 없다.(정확히는 극히 드물다.)

	cout << "number2 : " << number2 << "(size : " << sizeof(number2) << ")" << endl; //double 변수의 크기는 8바이트이며 포인터는 4바이트이다.
	cout << "pointer2 : " << pointer2 << "(size : " << sizeof(pointer2) << ")" << endl; //double 자료형의 포인터 변수 크기가 4바이트이다. double변수는 8바이트인데 왜 크기가 4로 출력이 될까?
	                                                                                    //이유는 포인터 변수가 실제 값이 아니라 주소, 즉 위치 값만 가지고 있는 것이 원인이다.
	                                                                                    //포인터는 실제 값이 아니라 주소를 가리키는 화살표만 저장하는데 이 화살표의 크기가 4바이트라고 이해할 수 있다.

	return 0;

}

/*
C언어의 꽃은 배열, 함수, 포인터라는 말이 있다.
그만큼 C언어를 공부하는데 꼭 이해하기 넘어가야 할 정도로 중요한 부분이다.
C++역시 포인터의 개념은 중요하다.
C#이나 자바엔 없는 개념이라 C++을 다뤄보지 않은 프로그래머들이 어려워하는 부분이다.

변수가 실제 값을 저장하는 용도로 사용한다면, 포인터는 변수의 주소를 가리킨다.
거꾸로 이야기하면 예제처럼 10이란 정수가 담겨있는 위치를 나타내는 것이 포인터이다.

*/