//115
//클래스 상속[1] Has-A 관계
#include <iostream>

using namespace std;

class Rent //Rent 클래스를 선언한다. 부모 클래스 전체에 관계없이 "임대료를 받습니다"라는 메세지를 출력한다.
{
public:
	void Payment() { cout << "임대료를 받습니다" << endl; }
};

class Landload : public Rent //Rent 클래스를 상속 받는 Landload 클래스를 선언한다. Rent 클래스를 상속하는 다른 클래스는 늘어날 수 있다.
{
public:
	void GetMoney()
	{
		cout << "건물주라서 ";
		Payment();
	}
};

int main()
{
	Landload master; //클래스 객체를 생성하고 결과를 출력한다.
	master.GetMoney();

	return 0;
}

/*
클래스 상속 관계 중 하나인 Has-a 관계는 포함, 집합 관계라고 한다.
위의 예제처럼 건물을 소유한 건물주는 임대료를 받는다 는 논리적으로 타당하나 임대료가 건물주를 받는다는 논제는 옳지 않다.

이렇게 부모 클래스가 자식 클래스를 포함, 소유하는 관계를 Has-a 관계라고 한다.
코드 사용성을 위해 명백한 포함, 소유 관계를 정의하는 것이 필요하다.

위의 예제 중 건물주 클래스를 렌터카 회사 사장이라 변경해도 자식 클래스인 Rent는 변경하지 않아도 된다.
"건물주라서", "렌터카 회사 사장이라서"라는 부모 클래스 전제는 자식 클래스가 출력하는 "임대료를 받습니다"라는 논제에 옳기 때문이다.
이처럼 하나의 클래스, 한 묶음의 소스를 다시 사용할 수 있는 것을 코드 재사용성이라 한다.
당연히 재사용성은 높을수록 좋다.
*/