//029
//캐스트 연산자 이해하기(static_cast)
#include <iostream>

using namespace std;

int main()
{
	int x = 2;
	//정수형 변수 선언
	double y = 4.4;
	//실수형 변수 선언

	int i = static_cast<int>(y / x);
	//변수 i에 4.4 나누기 2의 결과를 저장한다.
	//int는 소수점을 저장할 수 없어서 결과는 2가 된다. 정수와 실수 나누기의 결과는 static_cast를 통해 int로 변환된다.
	int j = (int)y / x;
	//C언어 스타일 캐스팅이다. 어떤 자료형도 무조건 변환한다는 문제가 있으니 C++에서는 가급적 사용하지 않는것이 좋다.
	double k = y / x;
	//double은 소수점을 저장할 수 있어서 따로 캐스팅하지 않아도 자연스럽게 결과값 2.2가 저장된다.

	cout << "4.4 / 2 = (static_cast<int>) " << i << endl;
	cout << "4.4 / 2 = (int) " << j << endl;
	cout << "4.4 / 2 = " << k << endl;

	return 0;
}

/*
자료형을 변경하는 전통적인 방법은 (double)처럼 괄호 안에 원하는 자료형을 넣어 다른 변수에 할당하는 것이었다.
하지만, 이런 C언어 스타일의 형변환은 아무 조건도 없이 무작정 변경하고 본다는 단점이 있다.

변경할 수 없을 때도 변경을 시도하니 예상하지 못한 문제가 발생한다.
그래서 프로젝트 규모가 커질수록 이런 사소한 문제로 인해 발생하는 에러를 찾아내기 힘들었다.
이런 문제를 해경하고자 C++에서는 4가지 자료형 변환 연산자를 제공한다.

static_cast<> : 가장 기본적인 캐스트 연산 방법.
dynamic_cast<> : 객체지향 언어의 다형성을 이용하여 모호한 타입 캐스팅 오류를 막아줌.
const_cast<> : 자료형이 갖고 있는 상수 속성을 제거.
reinterpret_cast<> : 어떠한 포인터 타입끼리도 변환할 수 있게 도움.

*/