//110
//동적 메모리 할당(new,delete)
#include <iostream>

using namespace std;

class Info
{
public:
	Info() { //클래스 생성자로 객체가 생성될 때 실행되는 함수이다. 여기서 29,30번 라인 변수에 대한 동적 메모리 할당이 이뤄진다.
		data = new int;
		data_arr = new int[3];
	}

	//같은 기능을 보유한 소멸자와 Dispose 함수이다.
	//이 두 함수는 동적 할당된 메모리를 해제한다.
	//할당된 메모리는 다른 영역에서 사용할 수 있게 사용이 끝나면 반환해야 한다.
	//만약 해제하지 않으면 프로그램이 종료한 뒤에도 이 메모리 여역에 접근할 수 없어 메모리 누수(leak) 등의 문제가 발생한다.
	~Info() {
		delete data;
		delete[] data_arr;
	}

	void Dispose()
	{
		delete data;
		delete[] data_arr;
	}

private: //두 변수를 선언한다. 동적 메모리 할당을 하면 변수 자체는 스택이 있지만 가리키는 메모리는 힙에 있기 때문에 변수 앞에 *을 붙여야 한다.
	int* data;
	int *data_arr;
};

int main()
{
	Info *info = new Info(); //객체를 생성하는데, 이 시점에 생성자를 통한 동적 할당이 발생한다. 즉, 힙 영역 어딘가에 두 변수를 위한 공간이 할당된다.

	info->Dispose(); //두 변수가 사용하던 메모리 영역을 반환한다.

	delete info; //에러가 발생한다! 이미 해제한 메모리 영역을 다시 해제하려 시도하기 때문이다.
	             //(이미 해제된 영역이기 때문에 힙 영역이 어디를 가리키는지 몰라 프로그램에서 에러가 발생하는 것이다.)

	return 0;
}

/*
메모리 영역은 크게 스택, 힙, 바이너리 영역으로 분리 된다.

> 스택은 변수처럼 컴파일 시점에 크기가 결정되는 요소들이 할당되는 영역이다.
> 바이너리는 static, 전역 요소들이 할당되는 영역이다.
> 힙은 동적으로 메모리가 할당되는 곳이라 지역 변수 등 프로그램 실행 상황에 맞춰 메모리가 할당/해제되는 공간이다.

변수는 스택에 있을 수도 있고 힙에 있을 수도 있다.

int *tmp를 선언하고 다른 곳에서 tmp = new int;라 선언했다면 스택의 tmp는 힙 영역에 할당된 곳을 바라보기도 한다.
반면 함수 내부에 선언된 지역 변수라면 힙에 할당되었다가 힙에서 메모리 해제된다.
*/